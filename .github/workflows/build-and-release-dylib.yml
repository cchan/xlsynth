name: Build and Release Bazel Target

on:
  push:
    tags:
      - '*'

permissions:
  contents: write  # Ensure the token has write permission for contents

jobs:
  build-osx:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Bazel output
      uses: actions/cache@v2
      id: cache-bazel
      with:
        path: |
          ~/.cache/bazel
          bazel-out
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: Build for x86_64
      run: |
        wget https://github.com/bazelbuild/bazel/releases/download/7.3.1rc2/bazel-7.3.1rc2-darwin-x86_64
        mv bazel-7.3.1rc2-darwin-x86_64 bazel-x86_64
        chmod +x bazel-x86_64
        bazel-x86_64 build -c opt //xls/public:libxls.dylib

    - name: Create artifact directory
      run: mkdir -p osx-artifacts

    - name: Verify x86_64 binaries
      run: |
        lipo -info bazel-bin/xls/public/libxls.dylib

    - name: Collect x86_64 artifacts
      run: |
        cp bazel-bin/xls/public/libxls.dylib osx-artifacts/libxls-x64.dylib

    - name: Build for arm64
      run: |
        wget https://github.com/bazelbuild/bazel/releases/download/7.3.1rc2/bazel-7.3.1rc2-darwin-arm64
        mv bazel-7.3.1rc2-darwin-arm64 bazel-arm64
        chmod +x bazel-arm64
        bazel-arm64 build -c opt //xls/public:libxls.dylib

    - name: Verify arm64 binaries
      run: |
        lipo -info bazel-bin/xls/public/libxls.dylib

    - name: Collect arm64 artifacts
      run: |
        cp bazel-bin/xls/public/libxls.dylib osx-artifacts/libxls-arm64.dylib

    - name: Make fat library
      run: |
        lipo -create -output osx-artifacts/libxls.dylib osx-artifacts/libxls-arm64.dylib osx-artifacts/libxls-x64.dylib

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: osx-artifacts
        path: osx-artifacts/

  build-ubuntu2004:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Bazel output
      uses: actions/cache@v2
      id: cache-bazel
      with:
        path: |
          ~/.cache/bazel
          bazel-out
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: Install Clang-17
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 17
        sudo apt-get install -y clang-17

    - name: Note Clang version
      run: clang-17 --version

    - name: Build Bazel target
      run: |
        CC=clang-17 CXX=clang++-17 bazelisk build -c opt //xls/public:libxls.so //xls/public:c_api //xls/dslx:interpreter_main

    - name: Create artifact directory
      run: mkdir -p ubuntu2004-artifacts

    - name: Copy Bazel target to ubuntu2004-artifacts
      run: |
        cp -r bazel-bin/xls/public/libxls.so ubuntu2004-artifacts/libxls-ubuntu20.04.so
        cp -r bazel-bin/xls/dslx/interpreter_main ubuntu2004-artifacts/interpreter_main-ubuntu20.04

    - name: Tarball stdlib files to ubuntu2004-artifacts
      run: tar -czvvf ubuntu2004-artifacts/dslx_stdlib.tar.gz xls/dslx/stdlib/*.x

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu2004-artifacts
        path: ubuntu2004-artifacts/


  build-ubuntu2204:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Cache Bazel output
      uses: actions/cache@v2
      id: cache-bazel
      with:
        path: |
          ~/.cache/bazel
          bazel-out
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/BUILD') }}
        restore-keys: |
          ${{ runner.os }}-bazel-


    - name: Install Clang-17
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 17
        sudo apt-get install -y clang-17

    - name: Note Clang version
      run: clang-17 --version

    - name: Build Bazel target
      run: |
        CC=clang-17 CXX=clang++-17 bazelisk build -c opt //xls/public:libxls.so //xls/public:c_api //xls/dslx:interpreter_main

    - name: Create artifact directory
      run: mkdir -p ubuntu2204-artifacts

    - name: Copy Bazel target to ubuntu2204-artifacts
      run: |
        cp -r bazel-bin/xls/public/libxls.so ubuntu2204-artifacts/libxls-ubuntu22.04.so
        cp -r bazel-bin/xls/dslx/interpreter_main ubuntu2204-artifacts/interpreter_main-ubuntu22.04

    - name: Tarball stdlib files to ubuntu2204-artifacts
      run: tar -czvvf ubuntu2204-artifacts/dslx_stdlib.tar.gz xls/dslx/stdlib/*.x

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu2204-artifacts
        path: ubuntu2204-artifacts/

  release:
    needs:
      - build-osx
      - build-ubuntu2004
      - build-ubuntu2204
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download osx-artifacts
      uses: actions/download-artifact@v2
      with:
        name: osx-artifacts
        path: osx-artifacts

    - name: Download ubuntu2004-artifacts
      uses: actions/download-artifact@v2
      with:
        name: ubuntu2004-artifacts
        path: ubuntu2004-artifacts

    - name: Download ubuntu2204-artifacts
      uses: actions/download-artifact@v2
      with:
        name: ubuntu2204-artifacts
        path: ubuntu2204-artifacts

    - name: Extract tag name
      id: extract_tag
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "Extracted tag name: $TAG_NAME"

    - name: Download GitHub CLI
      run: |
        curl -sSL https://github.com/cli/cli/releases/download/v2.30.0/gh_2.30.0_linux_amd64.tar.gz -o ghcli.tar.gz
        tar -xzf ghcli.tar.gz
        sudo mv gh_2.30.0_linux_amd64/bin/gh /usr/local/bin/

    - name: Create GitHub release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: ${{ env.TAG_NAME }}
      run: |
        export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
        gh release create "$TAG_NAME" osx-artifacts/libxls.dylib osx-artifacts/libxls-arm64.dylib osx-artifacts/libxls-x64.dylib ubuntu2004-artifacts/dslx_stdlib.tar.gz ubuntu2004-artifacts/libxls-ubuntu20.04.so ubuntu2004-artifacts/interpreter_main-ubuntu20.04 ubuntu2204-artifacts/libxls-ubuntu22.04.so ubuntu2204-artifacts/interpreter_main-ubuntu22.04 --title "Release $TAG_NAME" --notes "Automated release of $TAG_NAME"
