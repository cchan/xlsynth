#ifndef XLS_IR_NODES_
#define XLS_IR_NODES_

#include <cstdint>
#include <string>

#include "absl/status/statusor.h"
#include "absl/types/span.h"
#include "xls/ir/format_strings.h"
#include "xls/ir/lsb_or_msb.h"
#include "xls/ir/node.h"
#include "xls/ir/op.h"
#include "xls/ir/source_location.h"
#include "xls/ir/register.h"
#include "xls/ir/type.h"
#include "xls/ir/value.h"

namespace xls {

class Function;
class Instantiation;

struct SliceData {
  int64_t start;
  int64_t width;
};

{% for op_class in spec.OpClass.kinds.values() -%}
class {{ op_class.name }} final : public Node {
 public:
{% for op_set in op_class.fixed_operands() -%}
  static constexpr int64_t k{{op_set.operand.camel_case_name()}}Operand = {{op_set.index}};
{% endfor %}

  {{ op_class.name }}({{ op_class.constructor_args_str() }});

  absl::StatusOr<Node*> CloneInNewFunction(
    absl::Span<Node* const> new_operands,
    FunctionBase* new_function) const final;

{% for method in op_class.methods() -%}
{{ method.return_cpp_type }} {{ method.name }}({{ method.params }}) {%if method.is_const %} const{% endif %}
  {% if method.expression %}  {% if method.expression_is_body %} { {{ method.expression }} } {% else %} { return {{ method.expression }}; }  {% endif %}
  {% else %}; {% endif %}
{% endfor -%}

{% for op_set in op_class.optional_operands() -%}
{% if not op_set.operand.manual_optional_implementation %}
  absl::StatusOr<int64_t> {{op_set.operand.name}}_operand_number() const {
    if (!has_{{op_set.operand.name}}_) {
      return absl::InternalError("{{op_set.operand.name}} is not present");
    }
    int64_t ret = {{op_set.index}};

    {% for other_optional in op_class.optional_operands()  %}
      {% if other_optional.index < op_set.index %}
    if (!has_{{other_optional.operand.name}}_) {
      ret--;
    }
      {% endif %}
    {% endfor %}
    return ret;
  }

{% endif %}
{% endfor -%}

{%- if op_class.has_data_members() %}
  bool IsDefinitelyEqualTo(const Node* other) const final;

 private:
{% for member in op_class.data_members() -%}
{{ member.cpp_type }} {{ member.name }};
{% endfor %}
{%- endif -%}
};

{% endfor %}

}  // namespace xls

#endif  // XLS_IR_NODES_
