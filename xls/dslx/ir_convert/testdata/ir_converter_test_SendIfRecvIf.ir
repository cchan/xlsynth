package test_module

file_number 0 "test_module.x"

chan test_module__my_chan(bits[32], id=0, kind=streaming, ops=send_receive, flow_control=ready_valid, strictness=proven_mutually_exclusive, metadata="""""")

fn __test_module__producer.init() -> bits[1] {
  ret literal.1: bits[1] = literal(value=0, id=1)
}

fn __test_module__consumer.init() -> bits[1] {
  ret literal.2: bits[1] = literal(value=0, id=2)
}

top proc __test_module__main_0_next(__state: (), init={()}) {
  __token: token = literal(value=token, id=3)
  literal.5: bits[1] = literal(value=1, id=5)
  tuple.6: () = tuple(id=6)
  next (tuple.6)
}

proc __test_module__main__producer_0_next(__state: bits[1], init={0}) {
  literal.9: bits[1] = literal(value=1, id=9)
  after_all.10: token = after_all(id=10)
  zero_ext.11: bits[32] = zero_ext(__state, new_bit_count=32, id=11)
  and.12: bits[1] = and(literal.9, __state, id=12)
  __token: token = literal(value=token, id=7)
  send.13: token = send(after_all.10, zero_ext.11, predicate=and.12, channel=test_module__my_chan, id=13)
  not.14: bits[1] = not(__state, id=14)
  next (not.14)
}

proc __test_module__main__consumer_0_next(__state: bits[1], init={0}) {
  literal.17: bits[1] = literal(value=1, id=17)
  after_all.18: token = after_all(id=18)
  and.20: bits[1] = and(literal.17, __state, id=20)
  receive.21: (token, bits[32]) = receive(after_all.18, predicate=and.20, channel=test_module__my_chan, id=21)
  literal.19: bits[32] = literal(value=42, id=19)
  tuple_index.23: bits[32] = tuple_index(receive.21, index=1, id=23)
  tuple_index.22: token = tuple_index(receive.21, index=0, id=22)
  sel.24: bits[32] = sel(__state, cases=[literal.19, tuple_index.23], id=24)
  tuple.25: (token, bits[32]) = tuple(tuple_index.22, sel.24, id=25)
  __token: token = literal(value=token, id=15)
  tuple_index.26: token = tuple_index(tuple.25, index=0, id=26)
  foo: bits[32] = tuple_index(tuple.25, index=1, id=27)
  not.28: bits[1] = not(__state, id=28)
  next (not.28)
}
